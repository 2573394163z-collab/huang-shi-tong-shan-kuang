import path from 'node:path'
import tailwindcss from '@tailwindcss/vite'
import vue from '@vitejs/plugin-vue'
import { useDateFormat, useNow } from '@vueuse/core'
import AutoImport from 'unplugin-auto-import/vite'
import { defineConfig } from 'vite'
import viteCompression from 'vite-plugin-compression'
import vueDevTools from 'vite-plugin-vue-devtools'
import zipPack from 'vite-plugin-zip-pack'
import {
  assetFileNames,
  chunkFileNames,
  deleteAutoGeneratedFiles,
  entryFileNames,
  GodBlessYou,
  insetLatestBuildTime,
  manualChunks,
} from './src/utils/useVitePlugin'

const formatted = useDateFormat(useNow(), 'YYYYMMDDHHmm')

// https://vitejs.dev/config/
export default defineConfig({
  base: './',
  plugins: [
    vue({
      template: {
        compilerOptions: {
          isCustomElement: tag => tag.startsWith('kt-cus-'),
        },
      },
    }),
    vueDevTools(),
    tailwindcss(),
    GodBlessYou(),
    deleteAutoGeneratedFiles(),
    // 默认压缩gzip，生产.gz文件
    viteCompression({
      filter: /\.(js|mjs|json|css|html)$/i, // 匹配压缩哪些文件
      deleteOriginFile: false, // 压缩后是否删除源文件
    }),
    AutoImport({
      // 自动导入 Vue 相关函数，如：ref, reactive, toRef 等
      imports: [
        'vue',
        'pinia',
        'vue-router',
        {
          '@vueuse/core': ['useDateFormat', 'useNow'],
        },
      ],
      // ignore:['/src/ktJS/**'],
      // 配置本地目录 自动引入
      // dirs: ['./src/**'],
      dts: path.resolve(
        path.resolve(__dirname, 'src'),
        'types', // 指定自动导入函数TS类型声明文件路径
        'auto-imports.d.ts',
      ),
      eslintrc: {
        enabled: true,
        filepath: './eslintrc-auto-import.js',
        globalsPropValue: true,
      },
    }),
    zipPack({
      inDir: `./dist/${formatted.value}-dist`,
      outDir: './dist',
      outFileName: `${formatted.value}-dist.zip`,
    }),
  ],
  resolve: {
    alias: [{ find: '@', replacement: path.resolve(__dirname, './src') }],
  },
  server: {
    host: '0.0.0.0',
    port: 5173,
    open: true,
    // 代理
    proxy: {
      '/api': {
        target: 'http://127.0.0.1:3000',
        changeOrigin: true,
        rewrite: path => path.replace(/^\/api/, ''),
      },
    },
  },
  // 定义全局常量替换方式
  define: insetLatestBuildTime(),
  build: {
    outDir: `./dist/${formatted.value}-dist`,
    rollupOptions: {
      input: {
        index: path.resolve(__dirname, 'index.html'),
        // 添加全局变量文件
        env: path.resolve(__dirname, 'src/env.js'),
        uncompressed: 'src/env.js', // 不压缩的入口文件
      },
      output: {
        chunkFileNames,
        entryFileNames,
        assetFileNames,
        manualChunks,
      },
    },
  },
})
