import type { ManualChunksOption, PreRenderedAsset } from 'rollup'
import type { PluginOption } from 'vite'
import fs from 'node:fs'
import path from 'node:path'
import process from 'node:process'
import { useDateFormat, useNow } from '@vueuse/core'

const formatted = useDateFormat(useNow(), 'YYYYMMDDHHmm')

/**
 * 佛祖保佑
 */
export function GodBlessYou(): PluginOption {
  return {
    name: 'noBug-plugin',
    apply: 'serve', // 仅在开发/服务模式下应用此插件
    configResolved(config) {
      if (config.command === 'serve') {
        console.log(
          `
                             _ooOoo_
                            o8888888o
                            88" . "88
                            (| -_- |)
                             O\\ = /O
                         ____/\`---'\\____
                       .   ' \\\\| |// \`.
                        / \\\\||| : |||// \\
                      / _||||| -:- |||||- \\
                        | | \\\\\\ - /// | |
                      | \\_| ''\\---/'' | |
                       \\ .-\\__ \`-\` ___/-. /
                    ___\`. .' /--.--\\ \`. . __
                 ."" '< \`.___\\_<|>_/___.' >'"".
                | | : \`- \\\`.;\`\\ _ /\`;.\`/ - \` : | |
                  \\ \\ \`-. \\_ __\\ /__ _/ .-\` / /
          ======\`-.____\`-.___\\_____/___.-\`____.-'======
                             \`=---='
         
          .............................................
                   佛祖保佑             永无BUG
        `
        )
      }
    },
  }
}

/**
 * 获取最后打包时间
 */
export function insetLatestBuildTime(): Record<string, string> {
  return {
    LATEST_BUILD_TIME: formatted.value,
  }
}
/**
 *静态资源添加哈希
 */
export function assetFileNames(chunkInfo: PreRenderedAsset): string {
  if (chunkInfo.type === 'asset' && /\.(?:jpe?g|png|gif|svg|webp)$/i.test(chunkInfo.name)) {
    return 'static/img/[name].[hash][ext]'
  }
  if (chunkInfo.type === 'asset' && /\.(?:ttf|woff|woff2|eot)$/i.test(chunkInfo.name)) {
    return 'static/fonts/[name].[hash][ext]'
  }
  return 'static/[ext]/name1-[hash].[ext]'
}

/**
 * 手动分包
 */
export const manualChunks: ManualChunksOption = (id: string) => {
  if (id.includes('node_modules')) {
    if (id.includes('echarts')) {
      return 'echarts-vendor'
    }
    if (id.includes('@vue') || id.includes('vue')) {
      return 'vue-vendor'
    }
    return 'vendor'
  }
}

// 删除AutoImport自动生成的文件
export function deleteAutoGeneratedFiles() {
  function deleteFile(filePath) {
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath)
      console.log(`已删除旧版的文件: ${filePath}`)
    } else {
      console.log(`文件不存在: ${filePath}`)
    }
  }

  return {
    name: 'delete-auto-generated-files',
    buildStart() {
      if (process.env.NODE_ENV === 'development') {
        const typesDir = path.resolve(__dirname, '../../src/types')
        deleteFile(path.join(typesDir, 'auto-imports.d.ts'))
      }
    },
  }
}

export function chunkFileNames(chunkInfo: PreRenderedAsset): string {
  return 'static/js/[name]-[hash].js'
}

export function entryFileNames(chunkInfo: PreRenderedAsset): string {
  // 排除环境变量文件
  if (chunkInfo.name === 'env') {
    return 'env.js'
  }
  return 'static/js/[name]-[hash].js'
}
